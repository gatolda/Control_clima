"""
Controlador central del sistema. Se encarga de leer sensores y
ejecutar acciones sobre los actuadores seg√∫n el modo de operaci√≥n.
"""

from logica.modos import ModeManager, Modo
from logica.reglas_clima import ReglasClima


class ControladorClima:
    """
    Orquesta sensores, modos de operaci√≥n y actuadores.
    """

    def __init__(self, sensor, actuador, mode_manager: ModeManager):
        self.sensor = sensor
        self.actuador = actuador
        self.mode_manager = mode_manager
        self.reglas = ReglasClima()

    def leer_sensores(self):
        """
        Obtiene y devuelve las lecturas del sensor de temperatura/humedad.
        Si hay un error, devuelve None y lo reporta en consola.
        """
        datos = self.sensor.read()
        if datos.get("status") != "OK":
            print("‚ùå Error al leer el sensor")
            return None
        return datos

    def aplicar_modo(self, datos_sensores):
        """
        Aplica la l√≥gica seg√∫n el modo de operaci√≥n activo.
        """
        modo = self.mode_manager.obtener_modo()
        if datos_sensores is None:
            print("‚ö†Ô∏è No se aplicar√° l√≥gica: datos de sensores no disponibles.")
            return

        if modo == Modo.MANUAL:
            print("üïπÔ∏è Modo Manual: no se activan rel√©s autom√°ticamente.")
        elif modo == Modo.AUTOMATICO:
            print("ü§ñ Modo Autom√°tico: evaluando reglas...")
            acciones = self.reglas.evaluar(datos_sensores)
            for rele, estado in acciones.items():
                self.actuador.set_relay(rele, estado)
        elif modo == Modo.IA:
            print("üß† Modo IA: funcionalidad pendiente de implementaci√≥n.")
        else:
            print(f"‚ö†Ô∏è Modo desconocido: {modo}")
