"""
main.py - Sistema de control clim√°tico (corregido con sensor probado)
"""

import time
from logica.modos import ModeManager, Modo
from logica.controlador import ControladorClima
from Sensores.temp_humidity import TempHumiditySensor

# Simulaci√≥n de la placa de rel√©s
class RelayBoardSimulada:
    """Simula una placa de rel√©s. Imprime acciones en lugar de activar pines GPIO."""
    def __init__(self, relay_pins):
        self.relay_pins = relay_pins
        self.relay_states = {pin: False for pin in relay_pins}
        print(f"‚ö° [SIMULADO] Placa de rel√©s inicializada en pines: {self.relay_pins}")

    def set_relay(self, relay_number, state):
        """Simula encender o apagar un rel√©."""
        pin = self.relay_pins[relay_number - 1]
        self.relay_states[pin] = state
        action = "ON" if state else "OFF"
        print(f"üîå [SIMULADO] Rel√© {relay_number} (GPIO {pin}): {action}")


def seleccionar_modo_inicial():
    print("==== Sistema de Control Clim√°tico (MODO SEGURO) ====")
    print("Selecciona el modo de operaci√≥n:")
    print("1 - Manual")
    print("2 - Autom√°tico")
    opcion = input("Ingresa el n√∫mero de opci√≥n: ")

    if opcion == "1":
        return Modo.MANUAL
    elif opcion == "2":
        return Modo.AUTOMATICO
    else:
        print("‚ö†Ô∏è Opci√≥n inv√°lida. Iniciando en modo Manual por defecto.")
        return Modo.MANUAL


def main():
    print("üîÑ Iniciando sistema de control clim√°tico (modo seguro)...")

    # Configurar el modo inicial
    modo_inicial = seleccionar_modo_inicial()
    mode_manager = ModeManager(modo_inicial)
    print(f"‚úÖ Modo actual: {mode_manager.obtener_modo().value}")

    # Inicializar sensor y rel√©s simulados
    sensor = TempHumiditySensor(pin=4)  # Ajusta el pin si es necesario
    actuador = RelayBoardSimulada(relay_pins=[12, 38])
    controlador = ControladorClima(sensor, actuador, mode_manager)
    print("‚úÖ Sensores y rel√©s simulados inicializados correctamente.")

    try:
        while True:
            # Leer sensores
            datos = controlador.leer_sensores()
            print(f"üì° Lectura sensores: {datos}")

            # Aplicar l√≥gica seg√∫n el modo
            controlador.aplicar_modo(datos)
            print("‚úÖ L√≥gica aplicada seg√∫n el modo actual.")

            # Pausa entre ciclos
            print("‚è≥ Esperando 2 segundos...\n")
            time.sleep(2)

    except KeyboardInterrupt:
        print("\nüõë Programa detenido por el usuario.")


if __name__ == "__main__":
    main()
